import Contact from "../components/Contact";
import PageTitle from "../components/PageTitle";
import ContactModal from "../components/modals/ContactModal";
import job from "../models/job/job";
import { useRef, useState } from "react";

import styles from "../sass/pages/CreateJobNew.module.scss";
import ReactDOM from "react-dom";
import { useNavigate } from "react-router-dom";
import TaskNew from "../components/tasks/TaskNew";
import task from "../models/job/task";
import EditableTask from "../components/tasks/EditableTask";
import JobNotesModal from "../components/modals/JobNotesModal";

const CreateJobNewPage = () => {
  // will create and maintain a Job object state (local variable), and save that object to an existing data object to Firebase (existing from the initial creation in the CreateJobMenu page)
  // other values like inspectionSuccessful, timeLeft, and completionStatus are all auto generated by default, the rest is user input

  const navigate = useNavigate();

  const [contactsOpen, setContactsOpen] = useState<boolean>(false);
  const [notesOpen, setNotesOpen] = useState<boolean>(false);
  // set initial values
  const streetAddressRef = useRef<any>();
  const cityAddressRef = useRef<any>();
  const stateAddressRef = useRef<any>();

  const [currentJob, setCurrentJob] = useState<job>({
    title: "",
    checklist: [],
    contacts: [],
    notes: { description: "" },
    shortDescription: "",
    address: "",
    completionStatus: "",
    createdDate: new Date(),
    finishDate: new Date(),
    inspectionSuccessful: false,
    priority: "medium",
    timeLeft: "",
    expectedPay: "",
  });

  const onChangeAddress = () => {
    if (
      streetAddressRef.current.value.trim() == "" ||
      cityAddressRef.current.value.trim() == "" ||
      stateAddressRef.current.value.trim() == ""
    ) {
      return;
    }
    const newAddress: string =
      streetAddressRef.current.value.trim() +
      ", " +
      cityAddressRef.current.value.trim() +
      ", " +
      stateAddressRef.current.value.trim();
    setCurrentJob((prevJob) => {
      console.log({ ...prevJob, address: newAddress });
      return { ...prevJob, address: newAddress };
    });
  };

  const onOpenContacts = () => {
    setContactsOpen(true);
  };

  const onCloseContacts = () => {
    setContactsOpen(false);
  };

  const onSubmitContact = (
    firstName: string | undefined,
    lastName: string | undefined,
    phone: string | undefined
  ) => {
    setCurrentJob((prevJob) => {
      return {
        ...prevJob,
        contacts: [
          ...prevJob.contacts,
          {
            firstName: firstName,
            lastName: lastName,
            phone: phone,
            id: "id" + Math.random().toString(16).slice(2),
          },
        ],
      };
    });
  };

  const onDeleteContact = (id: string) => {
    setCurrentJob((prevJob) => {
      return {
        ...prevJob,
        contacts: prevJob.contacts.filter((contact) => {
          return contact.id != id;
        }),
      };
    });
  };

  const onOpenJobNotes = () => {
    setNotesOpen(true);
  };

  const onCloseJobNotes = () => {
    setNotesOpen(false);
  };

  const onChangeJobNotes = (newNotes: string) => {
    setCurrentJob((prevJob) => {
      return {
        ...prevJob,
        notes: { description: newNotes },
      };
    });
  };

  const addTask = (description: string, cost: string | number) => {
    setCurrentJob((prevJob) => {
      const newList = currentJob.checklist.concat({
        description: description,
        completed: false,
        note: "",
        cost: cost,
        id: "id" + Math.random().toString(16).slice(2),
        date: new Date(),
      });

      return { ...prevJob, checklist: newList };
    });
  };

  const onSaveEditTask = (task: task) => {
    setCurrentJob((prevJob) => {
      return {
        ...prevJob,
        checklist: prevJob.checklist
          .filter((eachTask) => {
            return eachTask.id != task.id;
          })
          .concat({ ...task }),
      };
    });
  };

  const onDeleteTask = (id: string) => {
    setCurrentJob((prevJob) => {
      const newList = prevJob.checklist.filter((task) => {
        return task.id != id;
      });
      return {
        ...prevJob,
        checklist: newList,
      };
    });
  };

  const onCompleteTask = (isCompleted: boolean, id: string) => {
    setCurrentJob((prevJob) => {
      const newList: task[] = prevJob.checklist.map((task) => {
        if (task.id === id) {
          return { ...task, completed: isCompleted };
        } else {
          return task;
        }
      });
      return { ...prevJob, checklist: newList };
    });
  };

  const onChangeTaskNotes = (newNotes: string, id: string) => {
    setCurrentJob((prevJob) => {
      const newList: task[] = prevJob.checklist.map((task) => {
        if (task.id === id) {
          return { ...task, note: newNotes };
        } else {
          return task;
        }
      });
      return { ...prevJob, checklist: newList };
    });
  };

  return (
    <>
      <main className={styles["main-content"]}>
        <PageTitle title="Create New Job" />

        <button
          onClick={() => {
            navigate("/createJob");
          }}
        >
          BACK
        </button>
        <button>Delete Job</button>

        <section>
          <label htmlFor="job-title">Job Title</label>
          <input
            type="text"
            id="job-title"
            onChange={(e) => {
              setCurrentJob((prevJob) => {
                return { ...prevJob, title: e.target.value };
              });
            }}
            onBlur={() => {
              console.log("Clicked AWAY!!! Save Data!");
            }}
          />
          <label htmlFor="address-street">Street Address</label>
          <input
            type="text"
            id="address-street"
            ref={streetAddressRef}
            onChange={() => {
              onChangeAddress();
            }}
          />
          <label htmlFor="address-city">City</label>
          <input
            type="text"
            id="address-city"
            ref={cityAddressRef}
            onChange={() => {
              onChangeAddress();
            }}
          />
          <label htmlFor="address-state">State</label>
          <select
            id="address-state"
            ref={stateAddressRef}
            onChange={() => {
              onChangeAddress();
            }}
          >
            <option value="AL">Alabama</option>
            <option value="AK">Alaska</option>
            <option value="AZ">Arizona</option>
            <option value="AR">Arkansas</option>
            <option value="CA">California</option>
            <option value="CO">Colorado</option>
            <option value="CT">Connecticut</option>
            <option value="DE">Delaware</option>
            <option value="DC">District Of Columbia</option>
            <option value="FL">Florida</option>
            <option value="GA">Georgia</option>
            <option value="HI">Hawaii</option>
            <option value="ID">Idaho</option>
            <option value="IL">Illinois</option>
            <option value="IN">Indiana</option>
            <option value="IA">Iowa</option>
            <option value="KS">Kansas</option>
            <option value="KY">Kentucky</option>
            <option value="LA">Louisiana</option>
            <option value="ME">Maine</option>
            <option value="MD">Maryland</option>
            <option value="MA">Massachusetts</option>
            <option value="MI">Michigan</option>
            <option value="MN">Minnesota</option>
            <option value="MS">Mississippi</option>
            <option value="MO">Missouri</option>
            <option value="MT">Montana</option>
            <option value="NE">Nebraska</option>
            <option value="NV">Nevada</option>
            <option value="NH">New Hampshire</option>
            <option value="NJ">New Jersey</option>
            <option value="NM">New Mexico</option>
            <option value="NY">New York</option>
            <option value="NC">North Carolina</option>
            <option value="ND">North Dakota</option>
            <option value="OH">Ohio</option>
            <option value="OK">Oklahoma</option>
            <option value="OR">Oregon</option>
            <option value="PA">Pennsylvania</option>
            <option value="RI">Rhode Island</option>
            <option value="SC">South Carolina</option>
            <option value="SD">South Dakota</option>
            <option value="TN">Tennessee</option>
            <option value="TX">Texas</option>
            <option value="UT">Utah</option>
            <option value="VT">Vermont</option>
            <option value="VA">Virginia</option>
            <option value="WA">Washington</option>
            <option value="WV">West Virginia</option>
            <option value="WI">Wisconsin</option>
            <option value="WY">Wyoming</option>
          </select>
        </section>
        <section>
          <figure>
            <figcaption>Contacts</figcaption>
            <div>
              {currentJob.contacts?.at(0) ? (
                <Contact
                  firstName={currentJob.contacts?.at(0)?.firstName}
                  lastName={currentJob.contacts?.at(0)?.lastName}
                  phone={currentJob.contacts.at(0)?.phone}
                  id={currentJob.contacts.at(0)!.id}
                  onDeleteContact={onDeleteContact}
                  showDelete={false}
                />
              ) : null}
              <button onClick={onOpenContacts}>View All Contacts</button>
              {contactsOpen &&
                ReactDOM.createPortal(
                  <ContactModal
                    contactArray={currentJob.contacts}
                    onCloseContacts={onCloseContacts}
                    onSubmitContact={onSubmitContact}
                    onDeleteContact={onDeleteContact}
                    showDeleteButton={true}
                    showCreateForm={true}
                  />,
                  document.getElementById("overlay-root")!
                )}
            </div>
          </figure>

          <figure>
            <figcaption>Notes</figcaption>
            {currentJob.notes.description != "" && (
              <p>{currentJob.notes.description}</p>
            )}
            <button onClick={onOpenJobNotes}>View Notes</button>
            {notesOpen &&
              ReactDOM.createPortal(
                <JobNotesModal
                  currentNotes={currentJob.notes.description}
                  onCloseJobNotes={onCloseJobNotes}
                  onChangeNotes={onChangeJobNotes}
                />,
                document.getElementById("overlay-root")!
              )}
          </figure>
        </section>
        <section id="task-list">
          <ul>
            {/* display list ordered by entered order (by date). works b/c entering another task at the same millisecond is impossible */}
            {currentJob.checklist
              .sort((a, b) => {
                if (a.date.getTime() < b.date.getTime()) {
                  return -1;
                } else if (a.date.getTime() > b.date.getTime()) {
                  return 1;
                } else {
                  return 0;
                }
              })
              .map((task) => {
                return (
                  <EditableTask
                    task={task}
                    onSaveEditTask={onSaveEditTask}
                    onDeleteTask={onDeleteTask}
                    onCompleteTask={onCompleteTask}
                    key={task.id}
                    onChangeTaskNotes={onChangeTaskNotes}
                  />
                );
              })}

            <div>
              <TaskNew submitForm={addTask} />
            </div>
          </ul>
        </section>
        <section>
          <label htmlFor="priority">Priority:</label>

          <select
            id="priority"
            defaultValue={"medium"}
            onChange={(e) => {
              setCurrentJob((prevJob) => {
                return { ...prevJob, priority: e.target.value };
              });
            }}
          >
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>

          <label htmlFor="finish-date">Expected Completion Date</label>
          <input
            type="date"
            id="finish-date"
            onChange={(e) => {
              setCurrentJob((prevJob) => {
                return { ...prevJob, finishDate: e.target.valueAsDate };
              });
            }}
          />
        </section>
        <button>Create Job</button>
      </main>
    </>
  );
};

export default CreateJobNewPage;
